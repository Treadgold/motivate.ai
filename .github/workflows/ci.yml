name: Motivate.AI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-backend-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-backend-
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run backend tests with coverage
      run: |
        cd backend
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term
        
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  test-desktop:
    name: Desktop Tests
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-desktop-${{ hashFiles('desktop/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-desktop-
    
    - name: Install desktop dependencies
      run: |
        cd desktop
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run desktop tests with coverage
      run: |
        cd desktop
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term
        
    - name: Upload desktop coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./desktop/coverage.xml
        flags: desktop
        name: desktop-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-desktop]
    
    services:
      ollama:
        image: ollama/ollama:latest
        ports:
          - 11434:11434
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Start backend server
      run: |
        cd backend
        python main.py &
        sleep 10  # Wait for server to start
        
    - name: Run integration tests
      run: |
        # Test API health
        curl -f http://localhost:8000/health
        
        # Test project creation
        curl -f -X POST "http://localhost:8000/api/v1/projects" \
          -H "Content-Type: application/json" \
          -d '{"title":"CI Test Project","description":"Integration test project"}'
          
        # Test AI service (may fail if Ollama not properly started)
        curl http://localhost:8000/api/v1/ai/health || echo "AI service test failed (expected)"

  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort
        
    - name: Check code formatting with Black
      run: |
        black --check --diff backend/ desktop/
        
    - name: Lint with flake8
      run: |
        flake8 backend/ desktop/ --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff backend/ desktop/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: Run safety check on dependencies
      run: |
        cd backend && pip install -r requirements.txt && safety check
        cd ../desktop && pip install -r requirements.txt && safety check
        
    - name: Run bandit security scan
      run: |
        bandit -r backend/ desktop/ -f json -o bandit-report.json || true
        bandit -r backend/ desktop/ 